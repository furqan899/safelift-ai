openapi: 3.0.3
info:
  title: Safelift AI API
  version: 1.0.0
  description: API for Safelift AI Admin Panel - User management and authentication
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: Authenticate admin user and receive JWT tokens
      summary: Admin Login
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
            examples:
              AdminLoginExample:
                value:
                  username: admin
                  password: admin123
                summary: Admin Login Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      description: Logout user and invalidate tokens
      summary: Logout
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ''
  /api/auth/refresh/:
    post:
      operationId: api_auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/health/:
    get:
      operationId: api_health_retrieve
      description: Check if the API is healthy and running
      summary: Health Check
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  user:
                    type: string
          description: ''
  /api/users/:
    get:
      operationId: api_users_list
      description: Get a list of all users (admin only)
      summary: List Users
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
              examples:
                UserResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 1
                      username: newuser
                      role: USER
                  summary: User Response
          description: ''
    post:
      operationId: api_users_create
      description: Create a new user (admin only)
      summary: Create User
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              CreateUserExample:
                value:
                  username: newuser
                  password: password123
                  role: USER
                summary: Create User Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                UserResponse:
                  value:
                    id: 1
                    username: newuser
                    role: USER
                  summary: User Response
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: Get details of a specific user
      summary: Get User
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                UserResponse:
                  value:
                    id: 1
                    username: newuser
                    role: USER
                  summary: User Response
          description: ''
    put:
      operationId: api_users_update
      description: Update a user (admin only)
      summary: Update User
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              CreateUserExample:
                value:
                  username: newuser
                  password: password123
                  role: USER
                summary: Create User Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                UserResponse:
                  value:
                    id: 1
                    username: newuser
                    role: USER
                  summary: User Response
          description: ''
    patch:
      operationId: api_users_partial_update
      description: Partially update a user (admin only)
      summary: Partial Update User
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
            examples:
              CreateUserExample:
                value:
                  username: newuser
                  password: password123
                  role: USER
                summary: Create User Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                UserResponse:
                  value:
                    id: 1
                    username: newuser
                    role: USER
                  summary: User Response
          description: ''
    delete:
      operationId: api_users_destroy
      description: Delete a user (admin only)
      summary: Delete User
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    AdminLoginRequest:
      type: object
      description: Custom login serializer for admin users.
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedUserRequest:
      type: object
      description: Serializer for basic user operations.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        role:
          $ref: '#/components/schemas/RoleEnum'
    RoleEnum:
      enum:
      - USER
      - ADMIN
      type: string
      description: |-
        * `USER` - User
        * `ADMIN` - Admin
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    User:
      type: object
      description: Serializer for basic user operations.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - id
      - username
    UserRequest:
      type: object
      description: Serializer for basic user operations.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
